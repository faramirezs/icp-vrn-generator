type AssistantMessage = record {
  content : opt text;
  tool_calls : vec ToolCall;
};
type CallContext = record {
  execution_round : nat64;
  canister_version : nat64;
  cycles_consumed : nat64;
  caller_principal : opt text;
};
type ChatMessage = variant {
  tool : record { content : text; tool_call_id : text };
  user : record { content : text };
  assistant : AssistantMessage;
  system : record { content : text };
};
type FunctionCall = record { name : text; arguments : vec ToolCallArgument };
type RandomNumberEntry = record {
  number : nat64;
  timestamp : nat64;
  sequence_id : nat64;
  call_context : CallContext;
};
type Result = variant { Ok : vec nat64; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type SequenceIntegrityStatus = record {
  total_entries : nat64;
  detected_gaps : vec nat64;
  is_valid : bool;
  error_message : opt text;
  expected_sequence_range : record { nat64; nat64 };
};
type ToolCall = record { id : text; function : FunctionCall };
type ToolCallArgument = record { value : text; name : text };
service : {
  chat : (vec ChatMessage) -> (text);
  export_recent_randoms : (nat64) -> (vec nat64) query;
  generate_random_batch : (nat64) -> (Result);
  generate_random_number : () -> (Result_1);
  get_count : () -> (nat64) query;
  get_history_count : () -> (nat64) query;
  get_random_history : () -> (vec RandomNumberEntry) query;
  greet : (text) -> (text) query;
  increment : () -> (nat64);
  prompt : (text) -> (text);
  set_count : (nat64) -> (nat64);
  verify_sequence_integrity : () -> (SequenceIntegrityStatus) query;
}
